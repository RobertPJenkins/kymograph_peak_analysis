function [threshold_trough_extrema_time,...
    threshold_peak_extrema_time...
    extrema_time_threshold,...
    extrema_x_threshold] = threshold_extrema_function(...
                                                      time,...
                                                      protrusion_x,...
                                                      threshold...
                                                      )
% THRESHOLD_EXTREMA_FUNCTION is a bespoke extrema finding method that
% defines peaks and troughs only if there is a distance of at least
% 'threshold' between them.
%
%   [threshold_trough_extrema_time,threshold_peak_extrema_time...
%    extrema_time_threshold,extrema_x_threshold] = ...
%    threshold_extrema_function(time,protrusion_x,threshold)
%   finds the peaks and troughs that are atleast 'threshold' distance
%   apart. The algorithm finds the first vector where there is a distance
%   of at least 'threshold' between maximum and minimum values. It
%   identifies the corresponding point as a candidate peak (trough) and
%   then calls extrema_candidate_update to check that this point qualifies
%   as a peak (trough) and updates it if not. It then calls
%   threshold_extrema_recorder to record relevant peak/trough information.
%
%   Input:
%   time: Vector of time points
%   protrusion_x: Vector of cell displacements
%   threshold: Minimum distance between peak and trough.
%   Output:
%   threshold_trough_extrema_time: Time of each recorded thresholded trough
%   threshold_peak_extrema_time: Time of each recorded thresholded peak
%   extrema_time_threshold: Time of each recorded thresholded extrema
%   extrema_x_threshold: Displacement of each thresholded extrema
%
%   Class support for input time, protrusion_x, threshold: single, double
%   
%
%   This work is licensed under a Creative Commons Attribution 4.0 
%   International License.


extrema_x_threshold=[];
extrema_time_threshold=[];

ignore_J=[];

for J=1:length(protrusion_x)-1
    break_out=0;
    if length(intersect(J,ignore_J))==0
       for K=J+1:length(protrusion_x)
           signal_x=protrusion_x(J:K);
           max_signal_x=max(signal_x);
           min_signal_x=min(signal_x);
           max_signal_index=J-1+find(signal_x==max_signal_x);
           max_signal_index=max_signal_index(1);
           min_signal_index=J-1+find(signal_x==min_signal_x);
           min_signal_index=min_signal_index(1);
           if max_signal_x-min_signal_x>threshold
              break_out=1;
              if max_signal_index>min_signal_index %if trough then peak
                  candidate_index=1;
                  candidate_index = extrema_candidate_update(...
                                    max_signal_index,...
                                    protrusion_x,...
                                    candidate_index,...
                                    threshold,...
                                    1 ...
                                    );
                  lb_index=J;
                  ub_index=max_signal_index+candidate_index-1;
                  
                  [extrema_x_threshold,extrema_time_threshold] = ...
                  threshold_extrema_recorder(...
                                            lb_index,...
                                            ub_index,...
                                            1,...
                                            extrema_x_threshold,...
                                            extrema_time_threshold,...
                                            protrusion_x,...
                                            J...
                                            );

              else %If peak then trough 
                  candidate_index=1;
                  candidate_index = extrema_candidate_update(...
                                    min_signal_index,...
                                    protrusion_x,...
                                    candidate_index,...
                                    threshold,...
                                    0 ...
                                    );
                  lb_index=J;
                  ub_index=min_signal_index+candidate_index-1;
                  [extrema_x_threshold,extrema_time_threshold] = ...
                  threshold_extrema_recorder(...
                                            lb_index,...
                                            ub_index,...
                                            0,...
                                            extrema_x_threshold,...
                                            extrema_time_threshold,...
                                            protrusion_x,...
                                            J...
                                            );
               end
            end
            if break_out==1
                %Ignore these values of J as already considered.
                ignore_J=[1:extrema_time_threshold(end)-1];
                break
            end
        end
    end
end
%Determine if peak or trough occurs first for recording
if extrema_x_threshold(1)<extrema_x_threshold(2)
    threshold_trough_extrema_time=extrema_time_threshold(1:2:end);
    threshold_peak_extrema_time=extrema_time_threshold(2:2:end);
else
    threshold_trough_extrema_time=extrema_time_threshold(2:2:end);
    threshold_peak_extrema_time=extrema_time_threshold(1:2:end);
end

end